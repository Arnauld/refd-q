# =========================================================
#    Autorisation
# =========================================================

enum Role {
    ROOT,
    AGENT,
    ADMIN
}

enum Permission {
    AUTHORITY_WRITE,
    AUTHORITY_READ
}

directive @auth(role : Role!) on FIELD_DEFINITION
directive @permission(perm : Permission!) on FIELD_DEFINITION

extend type Query {
    agentPermissions(id:Int!): [Permission]
}

# =========================================================
#    Miscellaneous
# =========================================================

type Property {
    key: String!
    value: String!
}

input PropertyInput {
    key: String!
    value: String!
}

type LocalizedLabel {
    locale: String!
    label: String!
}

input LocalizedLabelInput {
    locale: String!
    label: String!
}

type ImageMeta {
    id: Int!
    name: String
    contentType: String
    metadata: [Property!]
}

type Address {
    address1: String
    address2: String
    city: String
    zipcode: String
    country: String
}

input AddressInput {
    address1: String
    address2: String
    city: String
    zipcode: String
    country: String
}

enum CallerType {
    AGENT,
    CUSTOMER,
    SERVICE,
    DEVICE
}

interface HasAuditMeta {
    """ Creation timestamp since epoch in millis """
    created_at: Int
    """ Creator identifer  """
    created_by: String
    """ Creator Type """
    created_by_type: CallerType

    """ Last update timestamp since epoch in millis """
    updated_at: Int
    """ Last update initiator identifer  """
    updated_by: String
    """ Last update initiator Type """
    updated_by_type: CallerType
}

enum ErrorCode {
    NOT_FOUND,
    UNAUTHORIZED,
    BAD_PARAMETERS
}

interface Error {
    code: ErrorCode!
    args: [Property!]!
    message: String!
}

type UnauthorizedError implements Error {
    code: ErrorCode!
    args: [Property!]!
    message: String!
    requiredPermissions: [String]
}




# =========================================================
#    TENANTS
# =========================================================
type Tenant {
    id: Int!
    code: String!
    label: String
}

type Tenants{
    tenants: [Tenant!]!
}

input CreateTenantInput {
    code: String!
    label: String!
}

type CreateTenantPayload {
    tenant: Tenant
    error: Error
}

type Query {
    tenants(globPattern: String): Tenants @auth(role:ROOT)
}

type Mutation {
    createTenant(input: CreateTenantInput): CreateTenantPayload @auth(role:ROOT)
}

# =========================================================
#    Organization
# =========================================================

type Authority {
    id: Int!
    code: String!
    label(locales:[String]): [LocalizedLabel]
    legalName: String
    logo: ImageMeta
    postalAddress: Address
    phoneNumber: String
    webSite: String
    contactEmail: String
    """ ("twitter":"@idfm")  """
    socialNetworks: [Property!]
}

type Operator {
    id: Int!
    code: String!
    """ Authority """
    authorityId: Int!
    """ Parent Operator """
    parentId: Int
    """ Children Operator """
    childrenIds: [Int!]!
    """ Timestamp since epoch in millis """
    deactivationDate: Int
    label(locales:[String]): [LocalizedLabel]
    legalName: String
    logo: ImageMeta
    capitalAmount: String
    registrationNumber: String
    vatNumber: String
    headOfficeAddress: Address
    postalAddress: Address
    phoneNumber: String
    webSite: String
    contactEmail: String
    """
    e.g. ("twitter", "https://twitter.com/RATP_SmartSystM"),
         ("linkedin","https://www.linkedin.com/company/ratpsmartsystems")
    """
    socialNetworks: [Property!]
}

input CreateAuthorityInput {
    code: String!
    label: [LocalizedLabelInput!]!
    legalName: String!
    # -- not part of the payload, since filled by REST APIc; logo: ImageMeta
    postalAddress: AddressInput
    phoneNumber: String
    webSite: String
    contactEmail: String
    socialNetworks: [PropertyInput!]
}

type CreateAuthorityPayload {
    authority: Authority
    error: Error
}

input UpdateAuthorityInput {
    id: Int!
    label: [LocalizedLabelInput]
    legalName: String
    # -- not part of the payload, since filled by REST APIc; logo: ImageMeta
    postalAddress: AddressInput
    phoneNumber: String
    webSite: String
    contactEmail: String
    socialNetworks: [PropertyInput!]
}

type UpdateAuthorityPayload {
    authority: Authority
    error: Error
}

type AuthorityPayload {
    authority: Authority
    error: Error
}

extend type Query {
    """ Return current Authority """
    authority: AuthorityPayload @permission(perm: AUTHORITY_READ)
}

extend type Mutation {
    createAuthority(input: CreateAuthorityInput): CreateAuthorityPayload @auth(role: ROOT)
    updateAuthority(input: UpdateAuthorityInput): UpdateAuthorityPayload @permission(perm: AUTHORITY_WRITE)
}



# =========================================================
#    
# =========================================================

enum HolderType {
    AGENT,
    CUSTOMER_ANONYMOUS,
    CUSTOMER_DECLARATIVE,
    CUSTOMER_NOMINATIVE
}

enum PhysicalType {
    PAPER,
    CONTACTLESS_CARD,
    CONTACTLESS_TICKET,
    CONTACTLESS_TOKEN,
    MOBILE_APP
}

enum SupportTechnology {
    QR_CODE,
    NFC_CALYPSO_PRIME,
    NFC_CALYPSO_BASIC,
    NFC_CALYPSO_LIGHT,
    NFC_CALYPSO_APPLET,
    NFC_CALYPSO_HCE,
    NFC_MIFARE_CLASSIC,
    NFC_MIFARE_DESFIRE,
    NFC_MIFARE_PLUS,
    NFC_EMV,
    AUTO
}

type SupportType {
    id: Int!
    code: String!
    label(locales:[String]): [LocalizedLabel]
    holderType: HolderType
    physicalType: PhysicalType
    supportTechnologies: [SupportTechnology]
    networkCodes: [String!]
    greenListEnabled: Boolean
}

type VAT {
    id: Int!
    code: String!
    label(locales:[String]): [LocalizedLabel]
    # 
    # Float number as a String @see BigDecimal
    # represents decimal floating-point numbers of arbitrary precision
    #
    rate: String!
}

enum SupportingDocumentValidationMode {
    A_PRIORI,
    A_POSTERIORI
}

type SupportingDocumentType {
    id: Int!
    code: String!
    shortLabel: [LocalizedLabel]
    longLabel: [LocalizedLabel]
    description: [LocalizedLabel]
    validationModes: [SupportingDocumentValidationMode]
}

enum PaymentMode {
    CASH,
    CARD,
    CHECK,
    VOUCHER,
    DEBIT,
    OTHER
}

type DistributionChannel {
    id: Int!
    code: String!
    label: String!
    supportedPaymentModes: [PaymentMode]
}

type Currency {
    id: Int!
    code: String!
    label: String
    unit_multiplier: Int
}

type TransportMode {
    id: Int!
    code: String!
    label: [LocalizedLabel]
    externalCode: String
}

type Vehicle {
    id: Int!
    code: String!
    label: [LocalizedLabel]
    operatorId: Int
    transportMode: Int
    externalCode: String
}

## --- QUERY ---

type VehiclePayload {
    vehicle: Vehicle
    operator: Operator
    error: Error
}

type VehiclesPayload {
    vehicles: [Vehicle]
    operators: [Operator]
    error: Error
}

extend type Query {
    vehicle(id: Int): VehiclePayload
    vehicles(first:Int, after:String, sortBy:String): VehiclesPayload
}

input CreateVehicleInput {
    code: String!
    label: [LocalizedLabelInput]
    operatorId: Int
    transportMode: Int
    externalCode: String
}

type CreateVehiclePayload {
    vehicle: Vehicle
    operator: Operator
    error: Error
}

input UpdateVehicleInput {
    code: String
    label: [LocalizedLabelInput]
    operatorId: Int
    transportMode: Int
    externalCode: String
}

type UpdateVehiclePayload {
    vehicle: Vehicle
    operator: Operator
    error: Error
}

extend type Mutation {
    createVehicle(input: CreateVehicleInput): CreateVehiclePayload
    updateVehicle(input: UpdateVehicleInput): UpdateVehiclePayload
    updateVehicleOperator(vehicleId:Int!, operatorId:Int!): UpdateVehiclePayload
    updateVehicleLabel(vehicleId:Int!, locale:String!, label:String!): UpdateVehiclePayload
}
