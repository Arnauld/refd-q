type TransportMode {
    """
    Internal identifier of the transport mode
    """
    id: Int!

    """
    Readable and unique identifier of the transport mode
    """
    code: String!
    label(locales:[String]): [LocalizedLabel]
    externalCode: String
}

input CreateTransportModeInput {
    """
    Readable and unique identifier of the transport mode
    """
    code: String!
    label: [LocalizedLabelInput!]!
    externalCode: String
}

input UpdateTransportModeInput {
    """
    Localized label.
    If provided, the label will replace all existing ones.
    """
    label: [LocalizedLabelInput!]
    externalCode: String
}

type TransportModeEdge {
    node:TransportMode
}
type TransportModesConnection {
    pageInfo:PageInfo
    edges:[TransportModeEdge]
}

union CreateTransportModePayload = TransportMode | Error
union UpdateTransportModePayload = TransportMode | Error
union TransportModePayload = TransportMode | Error
union TransportModesConnectionPayload = TransportModesConnection | Error

extend type Query {
    transportModeById(id:Int!):TransportModePayload @auth(permission: TRANSPORT_MODE_READ)
    transportModes(first:Int, after:String):TransportModesConnectionPayload @auth(permission: TRANSPORT_MODE_READ)
}

extend type Mutation {
    createTransportMode(input: CreateTransportModeInput): CreateTransportModePayload @auth(permission: TRANSPORT_MODE_CREATE)
    updateTransportMode(input: UpdateTransportModeInput): UpdateTransportModePayload @auth(permission: TRANSPORT_MODE_UPDATE)
}
