"""
Tenant
"""
type Tenant {
    """
    Identifier of the tenant
    """
    id: Int!

    """
    Readable and unique identifier of the tenant
    """
    code: String!

    """
    Descriptive name
    """
    name: String!
}

type TenantEdge {
    node: Tenant
}

type TenantsConnection {
    edges: [TenantEdge]!
}

"""
Input to create a new Tenant
"""
input CreateTenantInput {
    """
    Readable and unique identifier of the tenant
    """
    code: String!

    """
    Descriptive name
    """
    name: String!
}

"""
Result of the Tenant creation
"""
union CreateTenantPayload = Tenant | Error

"""
Result of tenants query
"""
union TenantsPayload = TenantsConnection | Error

type Query {
    tenants(globPattern: String): TenantsPayload @auth(permission:TENANT_READ)
}

type Mutation {
    createTenant(input: CreateTenantInput): CreateTenantPayload @auth(permission:TENANT_WRITE)
}